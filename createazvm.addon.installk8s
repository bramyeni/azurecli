# $Id: createazvm.addon.installk8s 449 2022-04-29 02:10:08Z bpahlawa $
# initially created by Bram Pahlawanto 25-June-2020
# This is the list of parameters to deploy VM and SQL BDC fully automated
# $Author: bpahlawa $
# Modified by: bpahlawa
# $Date: 2022-04-29 10:10:08 +0800 (Fri, 29 Apr 2022) $
# $Revision: 449 $

export THEUSER
export FULLVMNAME
export K8SMASTER=lxk8smaster
export K8SNODE=lxk8snode
export NOOFWORKERS=7
export KUBEADM_JOIN_CMD=""

creating_disk()
{
   local MOUNTPOINT="$1"
   echo -n "Creating $MOUNTPOINT filesystem on Linux VM $VMNAME using user $THEUSER remotely..."
   ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
   [[ \$(mount | grep \"$MOUNTPOINT \" | grep -v grep | wc -l) -ne 0 ]] && echo \"mountpoint $MOUNTPOINT has been created!!\" && exit 1
DISK=\`sudo lsblk -no NAME | grep -Ev \"\$(sudo blkid | sed \"s/^\/dev\/\([a-zA-Z]\+\).*/\1/g\")|sr0|fd0\" | tail -1\`
if [ \"\$DISK\" != \"\" ]
then
   echo \"Creating $MOUNTPOINT disk....\"
   mkdir -p $MOUNTPOINT
   echo yes | sudo mkfs.xfs /dev/\$DISK
   echo \"/dev/\$DISK $MOUNTPOINT xfs defaults 0 0\" | sudo tee -a /etc/fstab
fi
sudo mount $MOUNTPOINT
if [ \$? -ne 0 ]
then
   echo \"Error creating filesystem $MOUNTPOINT on VM $VMNAME ( $FULLVMNAME ).... \" 
   exit 1
else
   echo \"mounting $MOUNTPOINT filesystem..... OK\"
   echo \"$MOUNTPOINT has been created and mounted successfully...\"
fi
"

}

generate_ssh_key()
{
    ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
hostname
[[ ! -f ~/.ssh/id_rsa ]] && ssh-keygen -f ~/.ssh/id_rsa -N \"\" || echo \"id_rsa and id_rsa.pub have been generated!!\"
"
}

install_packages()
{
   ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
hostname
apt-get update
apt-get -y upgrade
"
}


copy_createazvm()
{
   scp createazvm.env ${THEUSER}@${FULLVMNAME}:~
   scp createazvm.sh ${THEUSER}@${FULLVMNAME}:~
   scp createazvm.addon.installk8s ${THEUSER}@${FULLVMNAME}:~/remotescript.sh
}

run_createazvm()
{
   ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
hostname
./createazvm.sh $K8SMASTER
W=0
while [[ \$W -lt $NOOFWORKERS ]]
do
  W=\$(( W + 1 ))
  ./createazvm.sh "${K8SNODE}\${W}"
done
source ~/remotescript.sh
remote_run
"
}


remote_copy_and_run_script()
{
   local SSHREMOTE="$1"
   local SCRIPTNAME="$2"
   local MASTER="$3"
   scp "$SCRIPTNAME" ${SSHREMOTE}:~
   if [ "$MASTER" != "" ]
   then
      ssh -o "StrictHostKeyChecking no" "$SSHREMOTE" "./${SCRIPTNAME} -m reset-master -k /opt/kubelet -c /opt/containers -n f"
   else
      if [ "$KUBEADM_JOIN_CMD" = "" ]
      then
         ssh -o "StrictHostKeyChecking no" "$SSHREMOTE" "export MASTERIP=${K8SMASTER}; ./${SCRIPTNAME} -m reset-worker -k /opt/kubelet -c /opt/containers"
         export KUBEADM_JOIN_CMD=$(ssh -o "StrictHostKeyChecking no" "$SSHREMOTE" "cat k8sdeploy/k8sdeploy.log | grep \"Executing command kubeadm\" |  cut -f3-9 -d' '")
      else
         ssh -o "StrictHostKeyChecking no" "$SSHREMOTE" "export KUBEADM_JOIN_CMD=\"$KUBEADM_JOIN_CMD\"; ./${SCRIPTNAME} -m reset-worker -k /opt/kubelet -c /opt/containers"
      fi
   fi
}

remote_check_createvm_log()
{
  local NODENAME="$1"
  if [ $(tail -1 /tmp/createazvm.sh-${NODENAME}.log | grep "^ERROR:" | wc -l) -eq 0 ]
  then
     return 0
  else
     tail -1 /tmp/createazvm.sh-${NODENAME}.log
     return 1
  fi
}
   

remote_run()
{
  spool_script
  chmod ugo+x setup-k8scrio.sh
  export THEUSER=root
  [[ -f setup-k8scrio.sh ]] && scp setup-k8scrio.sh ${THEUSER}@${K8SMASTER}:~
  export FULLVMNAME=${K8SMASTER}
  creating_disk "/opt"
  ssh -o "StrictHostKeyChecking no" ${THEUSER}@${K8SMASTER} "cat ~/.ssh/authorized_keys" > authorized_keys
  remote_copy_and_run_script "${THEUSER}@${K8SMASTER}" "setup-k8scrio.sh"
  remote_check_createvm_log "$K8SMASTER"
  [[ $? -ne 0 ]] && exit 1

  W=0
  while [[ $W -lt $NOOFWORKERS ]]
  do
     W=$(( W + 1 ))
     remote_check_createvm_log "${K8SNODE}${W}"
     if [ $? -eq 0 ]
     then
        [[ -f setup-k8scrio.sh ]] && scp setup-k8scrio.sh ${THEUSER}@${K8SNODE}${W}:~
        export FULLVMNAME=${K8SNODE}${W}
        creating_disk "/opt"
        generate_ssh_key
        ssh -o "StrictHostKeyChecking no" ${THEUSER}@${K8SNODE}${W} "cat ~/.ssh/id_rsa.pub" >> authorized_keys
        chmod go-rwx authorized_keys
     else
        echo "Error in creating VM ${K8SNODE}${W}"
     fi
  done
  scp authorized_keys ${THEUSER}@${K8SMASTER}:~/.ssh
  remote_copy_and_run_script "${THEUSER}@${K8SMASTER}" "setup-k8scrio.sh" "Y"

  W=0
  while [[ $W -lt $NOOFWORKERS ]]
  do
     W=$(( W + 1 ))
     remote_check_createvm_log "${K8SNODE}${W}"
     if [ $? -eq 0 ]
     then
        remote_copy_and_run_script "${THEUSER}@${K8SNODE}${W}" "setup-k8scrio.sh"
     else
        echo "Skipping VM ${K8SNODE}${W} ..."
     fi
  done
}


run_addon()
{
   generate_ssh_key
   install_packages
   copy_createazvm
   run_createazvm
}


spool_script()
{
echo "" | base64 -d > setup-k8scrio.sh
}
