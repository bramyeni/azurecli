# $Id: createazvm.addon.installk8s 460 2022-07-17 05:05:47Z bpahlawa $
# initially created by Bram Pahlawanto 25-June-2020
# This is the list of parameters to deploy VM and SQL BDC fully automated
# $Author: bpahlawa $
# Modified by: bpahlawa
# $Date: 2022-07-17 13:05:47 +0800 (Sun, 17 Jul 2022) $
# $Revision: 460 $

#========configuration section========================

export K8SMASTER=lk8smaster
export K8SNODE=lk8snode
export NOOFWORKERS=2
export SCRIPT2RUN="setup-k8sfull.sh"
export DEBUG=""

#=====================================================

export THEUSER=root
export FULLVMNAME
export KUBEADM_JOIN_CMD=""
export NOOFCGROUP=""

creating_disk()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   local MOUNTPOINT="$1"
   local SSHCONNECT="$2"
   echo -n "Creating $MOUNTPOINT filesystem on Linux VM $SSHCONNECT remotely..."
   ssh -o "StrictHostKeyChecking no" ${SSHCONNECT} "
   [[ \$(mount | grep \"$MOUNTPOINT \" | grep -v grep | wc -l) -ne 0 ]] && echo \"mountpoint $MOUNTPOINT has been created!!\" && exit 1
DISK=\`sudo lsblk -no NAME | grep -Ev \"\$(sudo blkid | sed \"s/^\/dev\/\([a-zA-Z]\+\).*/\1/g\")|sr0|fd0\" | tail -1\`
if [ \"\$DISK\" != \"\" ]
then
   echo \"Creating $MOUNTPOINT disk....\"
   mkdir -p $MOUNTPOINT
   which mkfs.xfs 1>&2 >/dev/null
   if [ \$? -ne 0 ]
   then
      echo yes | sudo mkfs.ext4 /dev/\$DISK
      FSTYPE=ext4
   else
      echo yes | sudo mkfs.xfs /dev/\$DISK
      FSTYPE=xfs
   fi
   DISKUUID=\$(blkid /dev/\$DISK | awk '{print \$2}')
   echo \"\$DISKUUID $MOUNTPOINT \$FSTYPE defaults 0 0\" | sudo tee -a /etc/fstab
fi
sudo mount $MOUNTPOINT
if [ \$? -ne 0 ]
then
   echo \"Error creating filesystem $MOUNTPOINT on VM $VMNAME ( $FULLVMNAME ).... \"
   exit 1
else
   echo \"mounting $MOUNTPOINT filesystem..... OK\"
   echo \"$MOUNTPOINT has been created and mounted successfully...\"
fi
"

set +x
}


check_cgroup_v2()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   local SSHCONNECT="$1"
   NOOFCGROUP=$(ssh -o "StrictHostKeyChecking no" ${SSHCONNECT} "
   grep \"^cgroup \" /etc/mtab | awk '{print \$1}' | uniq | wc -l
")

set +x
}

generate_ssh_key()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
    ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
[[ \"$DEBUG\" = \"1\" ]] && set -x
hostname
[[ ! -f ~/.ssh/id_rsa ]] && ssh-keygen -f ~/.ssh/id_rsa -N \"\" || echo \"id_rsa and id_rsa.pub have been generated!!\"
"

set +x
}

install_packages()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
hostname
apt-get update
apt-get -y upgrade
"
set +x
}


copy_createazvm()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   scp createazvm.env ${THEUSER}@${FULLVMNAME}:~
   scp createazvm.sh ${THEUSER}@${FULLVMNAME}:~
   scp createazvm.addon.installk8s ${THEUSER}@${FULLVMNAME}:~/remotescript.sh
set +x
}

run_createazvm()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   ssh -o "StrictHostKeyChecking no" ${THEUSER}@${FULLVMNAME} "
[[ \"$DEBUG\" = \"1\" ]] && set -x
hostname
./createazvm.sh $K8SMASTER
W=0
while [[ \$W -lt $NOOFWORKERS ]]
do
  W=\$(( W + 1 ))
  ./createazvm.sh "${K8SNODE}\${W}"
done
source ~/remotescript.sh
remote_run
"

set +x
}


remote_copy_and_run_script()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   local SSHREMOTE="$1"
   source createazvm.env
   ssh -o "StrictHostKeyChecking no" "$SSHREMOTE" "
[[ \"$DEBUG\" = \"1\" ]] && set -x
export K8SMASTER=$K8SMASTER
export K8SNODE=$K8SNODE
export NOOFWORKERS=$NOOFWORKERS
export USERNAME=$ADMINUSER
export PASSWORD=\$(echo $ADMINPASSWORD | base64)
export NOPROMPT=1
./${SCRIPT2RUN} -m reset-master -k /opt/kubelet -c /opt/containers -n f"

set +x
}

remote_check_createvm_log()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
  local NODENAME="$1"
  if [ $(tail -1 /tmp/createazvm.sh-${NODENAME}.log | grep "^ERROR:" | wc -l) -eq 0 ]
  then
     return 0
  else
     tail -1 /tmp/createazvm.sh-${NODENAME}.log
     return 1
  fi

set +x
}
   

remote_run()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
  spool_script
  echo "Running on hostname $(hostname) ....."
  chmod ugo+x $SCRIPT2RUN
  [[ -f $SCRIPT2RUN ]] && scp -o "StrictHostKeyChecking no" $SCRIPT2RUN ${THEUSER}@${K8SMASTER}:~
  creating_disk "/opt" ${THEUSER}@${K8SMASTER}
  ssh -o "StrictHostKeyChecking no" ${THEUSER}@${K8SMASTER} "cat ~/.ssh/authorized_keys" > authorized_keys

  W=0
  while [[ $W -lt $NOOFWORKERS ]]
  do
     W=$(( W + 1 ))
     remote_check_createvm_log "${K8SNODE}${W}"
     if [ $? -eq 0 ]
     then
        creating_disk "/opt" "${THEUSER}@${K8SNODE}${W}"
     else
        echo "Error in creating VM ${K8SNODE}${W}"
     fi
  done
  check_cgroup_v2 ${THEUSER}@${K8SMASTER}
  if [ $NOOFCGROUP -le 1 ]
  then
      remote_copy_and_run_script "${THEUSER}@${K8SMASTER}"
      while [ $(ssh -o "StrictHostKeyChecking no" ${THEUSER}@${K8SMASTER} "echo \$(hostname)" 2>/dev/null) = "" ]
      do
         echo "Waiting for ${K8SMASTER} to be up and running...."
         sleep 3
     done
  fi
  remote_copy_and_run_script "${THEUSER}@${K8SMASTER}"
  remote_check_createvm_log "$K8SMASTER"
  [[ $? -ne 0 ]] && exit 1

set +x

}


run_addon()
{
[[ "$DEBUG" = "1" ]] && echo -e "\n\n\n" && set -x
   generate_ssh_key
   install_packages
   copy_createazvm
   run_createazvm
set +x
}


spool_script()
{
echo "" | base64 -d > $SCRIPT2RUN
}
